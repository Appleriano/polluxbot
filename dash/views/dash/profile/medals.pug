.level.is-marginless
  h1: b Equipped Medals
  .level
    .level-item.level-right
      a#resetmedals.button.is-small.is-danger RESET
      div &#x2000
      a#previewmedals.button.is-small.is-light PREVIEW
      div &#x2000
      a#savemedals.button.is-info.is-small CHANGE
br
ul.box.level#equipped
    -var it = 0;

    while it < 8
      -var medal_icon = user.modules.medals[it][0]
      -var medal_name = user.modules.medals[it][1]

      if medal_icon!=0 && user.modules.medals[it]!=[0,0]
        li.drop.ui-droppable.medalSlot(data-pos = it)
          .medallien(data-medal=medal_icon data-medname=medal_name).ui-draggable.drag.ui-sortable-handle.ui-draggable-handle
                .med-rare
                  -let base = JSON.parse(MEDALBASE)
                  -let filter = base.filter(med=>med.icon==medal_icon)
                  if filter[0] != undefined
                    img.this_rare_med(src="/images/tiers/"+rare+".png")

                .med-pic
                  img(src="/medals/"+medal_icon+".png")

                .med-name
                  p.tinyFonto= medal_name

      else
        li.drop.ui-droppable.medalSlot
      -it++

//---
#receivar(style="visibility:hidden")

p: b Medal Inventory
.nano.inv_box(style="height:250px")
    .nano-content
      ul#cardPile.sortable.dropB.ui-sortable.ui-droppable
        if  user.modules.medalInventory
          for i in user.modules.medalInventory
            if user.modules.medals.filter(md=>md[0]==i[0]).length!=0

            else
              li.medallien(data-medal=i[0] data-medname=i[1]).ui-draggable.drag
                  .med-rare
                      -let base = JSON.parse(MEDALBASE)
                      -let filter = base.filter(med=>med.icon==i[0])
                      img.this_rare_med(src="/images/tiers/"+filter[0].rarity+".png")
                  .med-pic
                      img(src="/medals/"+i[0]+".png")
                  .med-name
                      p.tinyFonto= i[1]
